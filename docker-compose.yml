version: '3.8'

networks:
  app-network:
    driver: bridge

volumes:
  keycloak-data:
    driver: local
  postgres-data:
    driver: local
  kafka-data:
    driver: local
  zookeeper-data:
    driver: local
  cache:
    driver: local
  mongodb:
    driver: local

services:
  postgres:
    container_name: postgres
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
      POSTGRES_DB: keycloak
      TZ: Europe/Moscow
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network


  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.0.6
    command:
      - "start-dev"
    restart: always
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      TZ: Europe/Moscow
    ports:
      - "8080:8080"
    networks:
      - app-network
    volumes:
      - keycloak-data:/opt/keycloak/data
    depends_on:
      - postgres


  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    networks:
      - app-network
    environment:
      TZ: Europe/Moscow
      ALLOW_ANONYMOUS_LOGIN: yes
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    networks:
      - app-network
    ports:
      - "9092:9092"
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_BROKER_ID: 1
      TZ: Europe/Moscow
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/var/lib/kafka/data

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      TZ: Europe/Moscow
    ports:
      - "9000:9000"
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis
    networks:
      - app-network
    environment:
      TZ: Europe/Moscow
    ports:
      - "6379:6379"
    volumes:
      - cache:/data

#  mongo:
#    image: mongo:6.0.21
#    container_name: mongo
#    ports:
#      - "27017:27017"
#    networks:
#      - app-network
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: admin
#      MONGO_INITDB_ROOT_PASSWORD: pass
#      TZ: Europe/Moscow
#    volumes:
#      - mongodb:/data/db
#    healthcheck:
#      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--quiet" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 30s
#
#  mongo-express:
#    image: mongo-express:1.0.2
#    container_name: mongo-express
#    ports:
#      - "8081:8081"
#    networks:
#      - app-network
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
#      ME_CONFIG_MONGODB_ADMINPASSWORD: pass
#      ME_CONFIG_MONGODB_SERVER: mongo
#      ME_CONFIG_MONGODB_PORT: 27017
#      TZ: Europe/Moscow
#    depends_on:
#      mongo:
#        condition: service_healthy