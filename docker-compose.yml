version: '3.8'

networks:
  app-network:
    driver: bridge

volumes:
  keycloak-data:
    driver: local
  postgres-data:
    driver: local
  postgres-order:
    driver: local
  postgres-shop:
    driver: local
  postgres-payment:
    driver: local
  kafka-data:
    driver: local
  zookeeper-data:
    driver: local
  cache:
    driver: local
  mongodb:
    driver: local
  pgadmin:
    driver: local
  esdata:
    driver: local
  prometheus-data:
    driver: local
  grafana-storage:
    driver: local

services:
  postgres:
    container_name: postgres
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
      POSTGRES_DB: keycloak
      TZ: Europe/Moscow
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5432:5432"


  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.0.6
    command:
      - "start-dev"
    restart: always
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      TZ: Europe/Moscow
    ports:
      - "8080:8080"
    networks:
      - app-network
    volumes:
      - keycloak-data:/opt/keycloak/data
    depends_on:
      - postgres

  postgres-order:
    image: postgres:15
    container_name: postgres-order
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: OrderServiceDB
    volumes:
      - postgres-order:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5433:5432"

  postgres-shop:
    image: postgres:15
    container_name: postgres-shop
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: ShopServiceDB
    volumes:
      - postgres-shop:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5434:5432"

  postgres-payment:
    image: postgres:15
    container_name: postgres-payment
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: PaymentServiceDB
    volumes:
      - postgres-payment:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5435:5432"

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    networks:
      - app-network
    depends_on:
      - postgres
      - postgres-order
      - postgres-shop
      - postgres-payment
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 5050
      TZ: Europe/Moscow
    ports:
      - '5050:5050'
    volumes:
      - pgadmin:/root/.pgadmin

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    networks:
      - app-network
    environment:
      TZ: Europe/Moscow
      ALLOW_ANONYMOUS_LOGIN: yes
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    networks:
      - app-network
    ports:
      - "9092:9092"
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_LISTENERS: INTERNAL://:29092,EXTERNAL://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_BROKER_ID: 1
      TZ: Europe/Moscow
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/var/lib/kafka/data

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      TZ: Europe/Moscow
    ports:
      - "9000:9000"
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis
    networks:
      - app-network
    environment:
      TZ: Europe/Moscow
    ports:
      - "6379:6379"
    volumes:
      - cache:/data

  mongo:
    image: mongo:6.0.21
    container_name: mongo
    ports:
      - "27017:27017"
    networks:
      - app-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: HistoryServiceDB
      TZ: Europe/Moscow
    volumes:
      - mongodb:/data/db
      - ./history-service/src/main/resources/mongo-init-scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--quiet" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-express:
    image: mongo-express:1.0.2
    container_name: mongo-express
    ports:
      - "8081:8081"
    networks:
      - app-network
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: pass
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      TZ: Europe/Moscow
    depends_on:
      mongo:
        condition: service_healthy

  config-server:
    build: ./config-server
    container_name: config-server
    environment:
      TZ: Europe/Moscow
    ports:
      - "8071:8071"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8071/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    environment:
      TZ: Europe/Moscow
      EUREKA_INSTANCE_HOSTNAME: eureka-server
    ports:
      - "8761:8761"
    networks:
      - app-network
    depends_on:
        config-server:
          condition: service_healthy

  getaway-server:
    build: ./getaway-server
    container_name: getaway-server
    environment:
      TZ: Europe/Moscow
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_SLEUTH_SAMPLER_PROBABILITY: 0.1
      SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED: false
    ports:
      - "8072:8072"
    networks:
      - app-network
    depends_on:
      - config-server
      - eureka-server
      - keycloak
      - logstash
      - elasticsearch
      - zipkin

  order-service:
    build: ./order-service
    container_name: order-service
    networks:
      - app-network
    ports:
      - "8180:8180"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-order:5432/OrderServiceDB
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 1234
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      TZ: Europe/Moscow
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_SLEUTH_SAMPLER_PROBABILITY: 0.1
      SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED: false
    depends_on:
      - keycloak
      - redis
      - postgres-order
      - config-server
      - getaway-server
      - kafka
      - logstash
      - zipkin
      - elasticsearch

  shop-service:
    build: ./shop-service
    container_name: shop-service
    networks:
      - app-network
    ports:
      - "8181:8181"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-shop:5432/ShopServiceDB
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 1234
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      TZ: Europe/Moscow
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_SLEUTH_SAMPLER_PROBABILITY: 0.1
      SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED: false
    depends_on:
      - keycloak
      - redis
      - postgres-shop
      - config-server
      - getaway-server
      - order-service
      - logstash
      - zipkin
      - elasticsearch

  payment-service:
    build: ./payment-service
    container_name: payment-service
    networks:
      - app-network
    ports:
      - "8182:8182"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-payment:5432/PaymentServiceDB
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 1234
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      TZ: Europe/Moscow
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_SLEUTH_SAMPLER_PROBABILITY: 0.1
      SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED: false
    depends_on:
      - keycloak
      - redis
      - postgres-payment
      - config-server
      - getaway-server
      - order-service
      - logstash
      - zipkin
      - elasticsearch

  notification-service:
    build: ./notification-service
    container_name: notification-service
    networks:
      - app-network
    ports:
      - "8183:8183"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      TZ: Europe/Moscow
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_SLEUTH_SAMPLER_PROBABILITY: 0.1
      SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED: false
    depends_on:
      - keycloak
      - config-server
      - getaway-server
      - kafka
      - logstash
      - zipkin
      - elasticsearch

  history-service:
    build: ./history-service
    container_name: history-service
    networks:
      - app-network
    ports:
      - "8184:8184"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://admin:pass@mongo:27017/HistoryServiceDB?authSource=admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      TZ: Europe/Moscow
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
      SPRING_SLEUTH_SAMPLER_PROBABILITY: 0.1
      SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED: false
    depends_on:
      - keycloak
      - config-server
      - getaway-server
      - eureka-server
      - kafka
      - mongo
      - logstash
      - zipkin
      - elasticsearch
    restart: on-failure

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - app-network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    networks:
      - app-network
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.2
    container_name: elasticsearch
    environment:
      discovery.type: single-node
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    networks:
      - app-network
    volumes:
      - esdata:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:8.6.2
    container_name: logstash
    volumes:
      - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "5000:5000"
      - "9600:9600"
    networks:
      - app-network
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - app-network
    depends_on:
      - elasticsearch